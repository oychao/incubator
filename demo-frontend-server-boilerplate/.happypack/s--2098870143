'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.userReducers = exports.rootUserEpic = exports.addingUserEpic = exports.fetchingUserEpic = undefined;

require('rxjs/Rx');

var _Observable = require('rxjs/Observable');

var _reduxObservable = require('redux-observable');

var _actions = require('./actions');

var _api = require('./_api.config');

var Api = _interopRequireWildcard(_api);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * Created by 欧阳 超 on 2017/01/16
                                                                                                                                                                                                     */

// user state reducer
var users = function users() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];

  switch (action.type) {
    case _actions.ADD_USER:
      return [].concat(_toConsumableArray(state), [action.user]);
    case _actions.DELETE_USER:
      return state.filter(function (user, idx) {
        return idx !== action.idx;
      });
    case _actions.RECEIVE_USERS:
      return [].concat(_toConsumableArray(state), _toConsumableArray(action.users));
    default:
      return state;
  }
};

// app state reducer
var appUsers = function appUsers() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    fetchingUser: false,
    addingUser: false,
    deletingUser: false
  };
  var action = arguments[1];

  switch (action.type) {
    case _actions.APP_FETCHING_USER:
      state.fetchingUser = true;
      return state;
    case _actions.APP_FETCHING_USER_FINISHED:
      state.fetchingUser = false;
      return state;
    case _actions.APP_ADDING_USER:
      state.addingUser = true;
      return state;
    case _actions.APP_ADDING_USER_FINISHED:
      state.addingUser = false;
      return state;
    case _actions.APP_DELETING_USER:
      state.deletingUser = true;
      return state;
    case _actions.APP_DELETING_USER_FINISHED:
      state.deletingUser = false;
      return state;
    default:
      return state;
  }
};

// epics
var fetchingUserEpic = exports.fetchingUserEpic = function fetchingUserEpic(action$) {
  return action$.ofType(_actions.APP_FETCHING_USER).switchMap(function () {
    return _Observable.Observable.ajax.get(Api.API_USER).flatMap(function (payload) {
      return _Observable.Observable.concat(_Observable.Observable.of((0, _actions.receiveUsers)(payload.response)), _Observable.Observable.of((0, _actions.appFetchingUserFinished)()));
    });
  });
};

var addingUserEpic = exports.addingUserEpic = function addingUserEpic(action$) {
  return action$.ofType(_actions.APP_ADDING_USER).switchMap(function (action) {
    return _Observable.Observable.ajax.post(Api.API_USER, action.user).map(_actions.addUser).mapTo(_Observable.Observable.of(_actions.appAddingUserFinished));
  });
};

var rootUserEpic = exports.rootUserEpic = (0, _reduxObservable.combineEpics)(fetchingUserEpic, addingUserEpic);

var userReducers = exports.userReducers = {
  users: users,
  appUsers: appUsers
};